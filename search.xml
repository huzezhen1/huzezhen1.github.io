<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用nvm管理node版本]]></title>
      <url>//huzezhen.cn/2018/11/23/nvm/</url>
      <content type="html"><![CDATA[<p>安装<code>Node.js</code>的最佳方式是使用<code>nvm</code>。</p>
<a id="more"></a>
<h1 id="下载并安装nvm"><a href="#下载并安装nvm" class="headerlink" title="下载并安装nvm"></a>下载并安装nvm</h1><p>为了方便，我们在<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">下载地址</a>中选择 <code>nvm-setup.zip</code>，然后解压按照正常软件安装即可。</p>
<p>如果是 <code>nvm-noinstall.zip</code> 版本可以<a href="https://blog.csdn.net/qq_41862017/article/details/82701760" target="_blank" rel="noopener">点击参考</a>。</p>
<h1 id="使用nvm来安装和管理node版本"><a href="#使用nvm来安装和管理node版本" class="headerlink" title="使用nvm来安装和管理node版本"></a>使用nvm来安装和管理node版本</h1><p>比如需要安装<code>node8.9.1</code>版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 8.9.1</span><br></pre></td></tr></table></figure>
<p>没有意外情况下就帮你安装好<code>node</code>和<code>npm</code>，我们可以查看版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure>
<p>切换到我们想要的<code>node8.9.1</code>版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 8.9.1</span><br></pre></td></tr></table></figure>
<p>比如想删除<code>node8.9.1</code>版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 8.9.1</span><br></pre></td></tr></table></figure>
<h1 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h1><p>当时安装时因为网速问题在自动安装<code>npm</code>时一直失败，后来设置到淘宝镜像服务器就解决了。</p>
<p>具体操作是在<code>nvm</code>安装文件夹中找到<code>settings.txt</code>，新增了配置，最终如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root: C:\Users\huzez\AppData\Roaming\nvm</span><br><span class="line">path: C:\Program Files\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown常用语法]]></title>
      <url>//huzezhen.cn/2018/11/23/markdown-note/</url>
      <content type="html"><![CDATA[<p>记录下Markdown的一些语法</p>
<!-- ![](/assets/blogImg/markdown-note.jpg) -->
<a id="more"></a>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>语法</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>语法</p>
<ul>
<li><p>无序列表</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>无序列表1</span><br><span class="line"><span class="bullet">- </span>无序列表2</span><br><span class="line"><span class="bullet">- </span>无序列表3</span><br><span class="line">-----或-----</span><br><span class="line"><span class="bullet">* </span>无序列表1</span><br><span class="line"><span class="bullet">* </span>无序列表2</span><br><span class="line"><span class="bullet">* </span>无序列表3</span><br></pre></td></tr></table></figure>
</li>
<li><p>有序列表  </p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序列表项目</span><br><span class="line"><span class="bullet">2. </span>有序列表项目</span><br><span class="line"><span class="bullet">3. </span>有序列表项目</span><br></pre></td></tr></table></figure>
</li>
<li><p>多层列表  </p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 外层列表<span class="number">1</span>  </span></span><br><span class="line"><span class="ruby">　- 内层列表<span class="number">1</span></span></span><br><span class="line"><span class="ruby">　- 内层列表<span class="number">2</span></span></span><br><span class="line"><span class="ruby">- 外层列表<span class="number">2</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>效果</p>
<ul>
<li>无序列表1</li>
<li>无序列表2</li>
<li>无序列表3</li>
</ul>
<ol>
<li>有序列表项目</li>
<li>有序列表项目</li>
<li>有序列表项目</li>
</ol>
<ul>
<li>外层列表1<ul>
<li>内层列表1</li>
<li>内层列表2</li>
</ul>
</li>
<li>外层列表2</li>
</ul>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>语法</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 引用的文字  </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 引用的文字</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash">&gt; 引用中的引用</span></span><br></pre></td></tr></table></figure>
<p>效果</p>
<blockquote>
<p>引用的文字<br>引用的文字</p>
<blockquote>
<p>引用中的引用</p>
</blockquote>
</blockquote>
<h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p>语法</p>
<ul>
<li><p>图片  </p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">名字</span>](<span class="link">图片地址</span>),如:[<span class="string">icon</span>](<span class="link">http://a.com/a.jpg</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>链接</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">名字</span>](<span class="link">链接地址</span>),如:[<span class="string">百度</span>](<span class="link">https://www.baidu.com</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h3><p>语法</p>
<ul>
<li><p>粗体</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**粗体**</span> </span><br><span class="line"><span class="strong">__粗体__</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>斜体</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line"><span class="keyword">_</span>斜体<span class="keyword">_</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>效果</p>
<p><strong>粗体</strong><br><strong>粗体</strong><br><em>斜体</em><br>_斜体_</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>语法<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> ABCD </span>|<span class="string"> EFGH </span>|<span class="string"> IJKL </span>|<span class="string">  </span></span><br><span class="line">|<span class="string"> -----</span>|<span class="string">:----:</span>|<span class="string"> ----:</span>|<span class="string">  </span></span><br><span class="line">|<span class="string"> a    </span>|<span class="string"> b    </span>|<span class="string"> c    </span>|<span class="string">  </span></span><br><span class="line">|<span class="string"> d    </span>|<span class="string"> e    </span>|<span class="string"> f    </span>|<span class="string">  </span></span><br><span class="line">|<span class="string"> g    </span>|<span class="string"> h    </span>|<span class="string"> i    </span>|</span><br></pre></td></tr></table></figure></p>
<p>效果</p>
<table>
<thead>
<tr>
<th>ABCD</th>
<th>EFGH</th>
<th>IGKL</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>d</td>
<td>e</td>
<td>f</td>
</tr>
<tr>
<td>g</td>
<td>h</td>
<td>i</td>
</tr>
</tbody>
</table>
<h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p>语法</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码代码代码`</span><br></pre></td></tr></table></figure>
<p>效果</p>
<p><code>代码代码代码</code></p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>语法</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">***</span></span><br></pre></td></tr></table></figure>
<p>效果  </p>
<hr>
<hr>
<p>以上两条就是对应效果</p>
<h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><blockquote>
<p>Mac平台</p>
<ul>
<li><a href="http://mouapp.com/" target="_blank" rel="noopener">Mou</a></li>
</ul>
</blockquote>
<blockquote>
<p>Windows平台</p>
<ul>
<li><a href="http://www.markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a></li>
<li><a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="noopener">MarkPad</a></li>
</ul>
</blockquote>
<blockquote>
<p>Web端</p>
<ul>
<li><a href="https://draftin.com/" target="_blank" rel="noopener">Draftin</a></li>
<li><a href="http://www.jianshu.com/" target="_blank" rel="noopener">简书</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于vscode的一些记录]]></title>
      <url>//huzezhen.cn/2018/05/07/vscode-record/</url>
      <content type="html"><![CDATA[<p>对<code>vscode</code>的相关记录</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在试用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener"><code>vscode</code></a>，先把大老婆<code>sublime</code>丢到一边，记录下<code>vscode</code>一些插件及用法，当作自己备忘。</p>
<p><code>sublime</code>启动的速度还是无敌，不过有ssd情况下<code>vscode</code>给我的体验也很好，不像<code>atom</code>这个仿佛开挂的卡逼。</p>
<h1 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h1><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在最左侧的“扩展”中搜索并安装，简单方便，快捷键是<code>ctrl + shift + x</code></p>
<h3 id="打开用户设置"><a href="#打开用户设置" class="headerlink" title="打开用户设置"></a>打开用户设置</h3><p>在安装好插件后想对插件进行自定义设置</p>
<p><code>ctrl + shift + p</code>， 然后搜索<code>ouss</code>（ 即<code>open user settings</code>） 或者 【文件】-&gt;【首选项】-&gt;【设置】</p>
<h1 id="插件记录"><a href="#插件记录" class="headerlink" title="插件记录"></a>插件记录</h1><h3 id="HTML-Snippets"><a href="#HTML-Snippets" class="headerlink" title="HTML Snippets"></a>HTML Snippets</h3><p>实用且初级的<code>HTML5</code>代码片段以及提示</p>
<p>但是好像新版的<code>vscode</code>自带的<code>emmet</code>已经有这个功能</p>
<h3 id="HTML-CSS-Support"><a href="#HTML-CSS-Support" class="headerlink" title="HTML CSS Support"></a>HTML CSS Support</h3><p>让<code>HTML</code>标签上写<code>class</code>， 智能提示当前项目所支持的样式</p>
<h3 id="fileheader"><a href="#fileheader" class="headerlink" title="fileheader"></a>fileheader</h3><p><code>ctrl + shift + i</code>， 可在头部插入注释， 包括作者信息， 需用户配置自己的名字等</p>
<p>比如我自己的设置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// setting.json，在用户设置中</span><br><span class="line"></span><br><span class="line">"fileheader.Author": "hu.zezhen",</span><br><span class="line">"fileheader.LastModifiedBy": "hu.zezhen"</span><br></pre></td></tr></table></figure>
<h3 id="jQuery-Code-Snippets"><a href="#jQuery-Code-Snippets" class="headerlink" title="jQuery Code Snippets"></a>jQuery Code Snippets</h3><p>编码的时候输入<code>jq</code>， 会有相关<code>jQuery</code>代码提示</p>
<p>不过觉得这样蛮傻的，不知道还有没有更友好点的提示</p>
<h3 id="vscode-icon"><a href="#vscode-icon" class="headerlink" title="vscode - icon"></a>vscode - icon</h3><p>让<code>vscode</code>资源树目录加上图标</p>
<h3 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h3><p>自动补全路径，在输入路径时比较好用，比如输入<code>img</code>标签的<code>src</code>路径时</p>
<h3 id="HTMLHint"><a href="#HTMLHint" class="headerlink" title="HTMLHint"></a>HTMLHint</h3><p><code>HTML</code>代码检测</p>
<h3 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h3><p>多个项目之间快速切换</p>
<p>需要先<code>ctrl + shift + p</code>，搜索<code>Project Manager</code>然后选择<code>Save Project</code></p>
<p>然后才会在左侧的<code>project</code>中看得到这个项目，然后可以保存多个之后就可以在里面切换</p>
<p>这一点<code>sublime</code>就方便多了，直接文件夹拖入左侧的<code>Side Bar</code>就行了</p>
<h3 id="Atuo-Rename-Tag"><a href="#Atuo-Rename-Tag" class="headerlink" title="Atuo Rename Tag"></a>Atuo Rename Tag</h3><p>修改<code>HTML</code>标签，自动帮你完成尾部闭合标签的同步修改</p>
<h3 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a>GitLens</h3><p>丰富的<code>git</code>日志插件</p>
<p>打开有关联<code>git</code>远程仓库的文件夹时会在左侧中出现<code>GitLens</code>项</p>
<p>还能显示当前行的<code>commit</code>信息</p>
<h3 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h3><p><code>git log</code>，会在标题页右侧有个按钮<code>Git: View History</code></p>
<h3 id="Open-HTML-in-Default-Browser"><a href="#Open-HTML-in-Default-Browser" class="headerlink" title="Open HTML in Default Browser"></a>Open HTML in Default Browser</h3><p>HTML文件中，右键会显示“在浏览器中打开”，会使用默认浏览器打开当前文件</p>
<h3 id="filesize"><a href="#filesize" class="headerlink" title="filesize"></a>filesize</h3><p>装了之后会在左下角显示当前文件大小</p>
<h3 id="Bracket-Pair-Colorizer"><a href="#Bracket-Pair-Colorizer" class="headerlink" title="Bracket Pair Colorizer"></a>Bracket Pair Colorizer</h3><p>让括号有独立颜色，便于区分，可查看安装页的详细配置，例如我自己的用户配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"bracketPairColorizer.forceIterationColorCycle": true,</span><br><span class="line">"bracketPairColorizer.forceUniqueOpeningColor": true,</span><br><span class="line">"bracketPairColorizer.showBracketsInGutter": true</span><br></pre></td></tr></table></figure>
<h3 id="vetur"><a href="#vetur" class="headerlink" title="vetur"></a>vetur</h3><p>开发vue时必备，语法高亮、智能感知、<code>Emmet</code>等</p>
<h3 id="VueHelper"><a href="#VueHelper" class="headerlink" title="VueHelper"></a>VueHelper</h3><p><code>vue</code>相关的<code>snippet</code>代码片段</p>
<h3 id="Markdown-Preview-Enhanced"><a href="#Markdown-Preview-Enhanced" class="headerlink" title="Markdown Preview Enhanced"></a>Markdown Preview Enhanced</h3><p>预览<code>markdown</code>文件，右键选择<code>Markdown Preview</code></p>
<h3 id="Import-Cost"><a href="#Import-Cost" class="headerlink" title="Import Cost"></a>Import Cost</h3><p>会显示<code>import</code>引入的包的大小</p>
<h3 id="Dark-Dracula"><a href="#Dark-Dracula" class="headerlink" title="Dark-Dracula"></a>Dark-Dracula</h3><p>这是一个主题，目前自己用的这个</p>
<h3 id="vscode-background"><a href="#vscode-background" class="headerlink" title="vscode-background"></a>vscode-background</h3><p>可以给编辑器加背景图片，详细配置也可查看安装页的说明，我这里的配置是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">"background.enabled": true,</span><br><span class="line">"background.useDefault": false,</span><br><span class="line">"background.customImages": [</span><br><span class="line">    // 支持本地图片和https开头的图片</span><br><span class="line">    // 最多可分三栏，所以最多支持三张</span><br><span class="line">    "https://xxx.com/cdn/ybmq.min.png",  </span><br><span class="line">    "https://xxx.com/cdn/ybmq.min.png",</span><br><span class="line">    <span class="string">"https://xxx.com/cdn/ybmq.min.png"</span>                </span><br><span class="line">],</span><br><span class="line">"background.style": &#123;</span><br><span class="line">    "content": "''",</span><br><span class="line">    "pointer-events": "none",</span><br><span class="line">    "position": "absolute",</span><br><span class="line">    "z-index": "99999",</span><br><span class="line">    "width": "100%",</span><br><span class="line">    "height": "100%",</span><br><span class="line">    "background-position": "100% 100%",</span><br><span class="line">    "background-repeat": "no-repeat",</span><br><span class="line">    "opacity": 0.3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://youss.cc/cdn/vscode-001.png" alt="例图"></p>
<p>需要注意的是安装了这个插件，<code>vscode</code>会提示安装损坏，选择“不再提示”即可，作者自己在安装页也有解释。</p>
<h3 id="Beautify"><a href="#Beautify" class="headerlink" title="Beautify"></a>Beautify</h3><p>格式化代码格式，可在用户配置中配置自己的风格，例如我这里配置了缩进为2个空格</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"beautify.config": &#123;</span><br><span class="line">    "indent_size": 2,</span><br><span class="line">    "indent_char": " "</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Setting-Sync"><a href="#Setting-Sync" class="headerlink" title="Setting Sync"></a>Setting Sync</h3><p>上传配置 <code>Shift + Alt + U</code></p>
<p>下载配置 <code>Shift + Alt + D</code></p>
<p>同步vscode插件等设置用的，测试了给宿舍的电脑同步公司上的设置可用</p>
<p>详细配置可<a href="https://www.cnblogs.com/kenz520/p/7416836.html" target="_blank" rel="noopener">点击</a>参考</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript定时器]]></title>
      <url>//huzezhen.cn/2017/04/21/javascript-timer/</url>
      <content type="html"><![CDATA[<p>主要探究<code>setTimeout()</code>、<code>setInterval()</code>的运行机制</p>
<p>如果你知道<code>setTimeout(fn, 0)</code>的作用，那可以不用点开本文</p>
<!-- ![](/assets/blogImg/javascript-timer.jpg) -->
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JavaScript的定时器主要是由<code>setTimeout()</code>和<code>setInterval()</code>组成</p>
<h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">fn</span>|<span class="built_in">code</span>, delay)</span>;</span><br></pre></td></tr></table></figure>
<p>表示<code>delay</code>秒之后执行<code>fn</code>或者<code>code</code>，只执行一次</p>
<p>第一个参数可以是一个函数，也可以是一段代码字符串，因为内部是用<code>eval</code>来执行的，所以需要是字符串</p>
<p>第二个参数是指延迟多少毫秒后执行第一个参数，省略的话则表示0</p>
<p>其实后面还可以带其他参数，作为第一个参数（函数）的实参，但是IE9以下不支持，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2秒后输出1</span></span><br><span class="line"><span class="comment">// 但是一般没这么写，直接把实参写到函数体内不就好了</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;, <span class="number">2000</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>返回值是一个整数值，代表这个计时器，供给<code>clearTimeout()</code>来清除这个定时器</li>
<li>HTML5标准规定，<code>setTimeout()</code>的最短时间间隔是<strong>4毫秒</strong></li>
<li><code>setTimeout()</code>是挂在<strong>window</strong>对象下的，延迟之后的执行函数中的<code>this</code>，永远指向<strong>window</strong></li>
</ol>
<h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h3><p>大概用法与<code>setTimeout()</code>一致，不过<code>setInterval()</code>表示的是<strong>每隔多久就会执行一次</strong></p>
<p>需要注意的是，这次间隔时间是从<strong>上次执行开始</strong>就开始计算的，比如说，每100ms执行一次，但是执行过程需要5ms，也就是95ms之后就会执行第二次了</p>
<p>注意：HTML5标准规定，<code>setInterval()</code>的最短间隔时间是<strong>10毫秒</strong></p>
<h3 id="clearTimeout-、clearInterval"><a href="#clearTimeout-、clearInterval" class="headerlink" title="clearTimeout()、clearInterval()"></a>clearTimeout()、clearInterval()</h3><p><code>setTimeout()</code>、<code>setInterval()</code>返回的是一个整数值，代表这个定时器，传入对应的<code>clearTimeout()</code>或<code>clearInterval()</code>则可清除对应的定时器</p>
<h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>想要了解运行机制，首先得了解下JavaScript的<code>Event Loop</code>：</p>
<blockquote>
<p><a href="https://segmentfault.com/a/1190000004322358" target="_blank" rel="noopener">JavaScript：彻底理解同步、异步和事件循环(Event Loop)</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">并发模型与事件循环</a><br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">关于Event Loop</a> </p>
</blockquote>
<p>JavaScript是<strong>单线程</strong>的，我们称这条单线程为<strong>主线程</strong>，所有同步任务（包括调用异步函数，但不包括执行异步任务、触发回调等操作）都在主线程上执行，形成一个<strong>执行栈</strong></p>
<p>主线程之外，还存在一个<strong>任务队列</strong>（task queue，也有人叫做<strong>消息队列</strong>），只要异步任务有了运行结果，就在任务队列之中放置一个事件(消息，对应着回调函数)</p>
<p>一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列（由于定时器的存在，所以会先判断是否到了执行时间），于是那些对应的异步任务就结束等待状态，进入执行栈，开始执行，主线程会不断重复这一操作，这过程就叫<strong>事件循环</strong>(Event Loop)</p>
<p><img src="/assets/blogImg/javascript-timer-1.png" alt=""></p>
<p>那么有上面的知识基础的话，我们应该清楚<code>setTimeout()</code>、<code>setInterval()</code>会将执行代码先放到异步任务（即移出本次的执行栈），然后在下一次事件循环时判断是否到了执行时间，是则执行，还没到则下次事件循环再判断，换句话说，也就是要等到本轮Event Loop的同步任务都执行完，才会判断是否开始执行</p>
<p>因此也无法保证一定会按照规定的时间执行，比如说本轮的某个同步任务执行完需要很久很久的时间</p>
<p>特别是对于<code>setInterval()</code>事件，它具有积累性，比如说：</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  console.log(2);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>, 1000);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面执行完需要3秒</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  sleeping(3000);	</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>)<span class="params">()</span>;</span></span><br></pre></td></tr></table></figure>
<p>结果会是:下面的语句完成(需3秒)后连续输出三个2，然后再开始每隔1秒输出一个2，就是因为<code>setInterval()</code>具有累积效应</p>
<h3 id="setTimeout-fn-0"><a href="#setTimeout-fn-0" class="headerlink" title="setTimeout(fn, 0)"></a>setTimeout(fn, 0)</h3><p>经常看到<code>setTimeout(fn, 0)</code>，可能很多人看到0会认为是立即执行，其实不然，通过上面运行机制的了解也应该知道不会立即执行</p>
<p>其实他最主要的作用是用来改变事件的执行顺序，比如：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">input</span> = document.getElementsByTagName(<span class="string">'input[type=button]'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>.onclick = <span class="function"><span class="keyword">function</span> <span class="title">A</span><span class="params">()</span></span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">B</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">input</span>.value +=<span class="string">' input'</span>;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">document.body.onclick = <span class="function"><span class="keyword">function</span> <span class="title">C</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="built_in">input</span>.value += <span class="string">' body'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>当我们点击input时，触发的几个函数的执行顺序为：A -&gt; C -&gt; B</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>关于<strong>正常任务</strong>与<strong>微任务</strong></p>
<p><strong>正常任务</strong>：下一轮Event Loop才会执行的任务，大概有这样的正常任务：setTimeout、setInterval、setImmediate、I/O、各种事件（比如鼠标单击事件）的回调函数<br><strong>微任务</strong>：本轮Event Loop的所有任务结束后执行，目前主要是：process.nextTick和Promise</p>
<p>简单例子加以理解：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Promise.resolve().<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>执行结果为：先输出1 然后5 然后3 然后4 然后2<br>解释：首先输出1，然后setTimeout(fn,0)是在本轮队列全部执行完后才执行，Promise的resolve是放在本轮队列的最后执行，但还是属于本轮，因此接下来是输出5，然后才是Promise的resolve，输出3，输出4，最后才是输出2</p>
<p>另一个经典例子：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">new Promise(<span class="function"><span class="keyword">function</span> <span class="title">executor</span><span class="params">(resolve)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span>( var <span class="built_in">i</span>=<span class="number">0</span> ; <span class="built_in">i</span>&lt;<span class="number">10000</span> ; <span class="built_in">i</span>++ ) &#123;</span><br><span class="line">    <span class="built_in">i</span> == <span class="number">9999</span> &amp;&amp; resolve();</span><br><span class="line">  &#125;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>执行结果为：输出2，3，5，4，1<br>解释：setTimeout(fn,0)是在本轮队列执行完后才执行，Promise里面的函数直接执行，输出2，输出3，Promise的resolve则是放到本轮队列的最后，因此接下来执行5，然后才是执行resolve，即then里面的输出4，最后才是setTimeout的输出1</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端手势的实现原理]]></title>
      <url>//huzezhen.cn/2017/04/15/mobile-gesture/</url>
      <content type="html"><![CDATA[<p>探究下移动端上一些手势实现的思路</p>
<!-- ![](/assets/blogImg/mobile-gesture.jpg) -->
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前写过一篇介绍<a href="/2017/03/25/mobile-events/">移动端触摸事件</a>的文章，我们得知移动上几个原生的触摸事件：<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>、<code>touchcancel</code>，那怎么利用这些原生的事件来实现一些手势呢，本文主要就是介绍这些手势交互实现的一些思路</p>
<h3 id="单指手势"><a href="#单指手势" class="headerlink" title="单指手势"></a>单指手势</h3><p>前提，整个事件定义一个中间状态status表示当前的触摸状态</p>
<h5 id="轻触tap"><a href="#轻触tap" class="headerlink" title="轻触tap"></a>轻触tap</h5><p><code>touchstart</code>触发时，状态改为tap，若<code>touchend</code>时还是tap，则认为是tap</p>
<h5 id="双击轻触doubletap"><a href="#双击轻触doubletap" class="headerlink" title="双击轻触doubletap"></a>双击轻触doubletap</h5><p>触发tap事件时记录当前时间，下次触发tap事件时用当前时间与记录的时间进行对比，如果小于300ms则认为触发了doubletap</p>
<h5 id="长按press"><a href="#长按press" class="headerlink" title="长按press"></a>长按press</h5><p><code>touchstart</code>触发时设置一个500ms的setTimeout，500ms后仍然没有<code>touchend</code>触发则把状态改为press，等到<code>touchend</code>时检测到状态press则认为触发press</p>
<h5 id="平移pan"><a href="#平移pan" class="headerlink" title="平移pan"></a>平移pan</h5><p><code>touchmove</code>过程中检测状态是否是tap或者press，并且移动距离大于10px（自己规定）则认为是pan</p>
<p>关于移动距离的计算：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> distanceX = touchEnd.clientX - touchStart.clientX,	<span class="comment">// touchmove的x坐标减去touchstart的x坐标</span></span><br><span class="line"><span class="keyword">var</span> distanceY = touchEnd.clientY - touchStart.clientY,	<span class="comment">// touchmove的y坐标减去touchstart的y坐标</span></span><br><span class="line"><span class="keyword">var</span> distance = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(distanceX, <span class="number">2</span>) + <span class="built_in">Math</span>.pow(distanceY, <span class="number">2</span>));	<span class="comment">// 利用勾股定理求值</span></span><br></pre></td></tr></table></figure>
<h5 id="轻拂flick"><a href="#轻拂flick" class="headerlink" title="轻拂flick"></a>轻拂flick</h5><p><code>touchend</code>时通过pan的移动距离和移动事件算出速度（X轴和Y轴的合速度），如果速度大于0.5且触摸过程时间小于100ms则认为是flick</p>
<p>关于合速度：<br>将物体的速度分为x方向速度（水平速度）,和y方向速度（竖直速度）<br>那么合速度就是&radic;(x<sup>2</sup>+y<sup>2</sup>)，即根号下x平方加y平方</p>
<h3 id="多指手势"><a href="#多指手势" class="headerlink" title="多指手势"></a>多指手势</h3><p>这里只研究两个手指的触控，假设：</p>
<p><code>touchstart</code>时，两个手指的坐标点 A(x1, y1)、B(x2, y2)<br><code>touchmove</code>时，两个手指的坐标点  C(x3, y3)、D(x4, y4)</p>
<h5 id="旋转rotate"><a href="#旋转rotate" class="headerlink" title="旋转rotate"></a>旋转rotate</h5><p>计算AB，CD线段与坐标轴的夹角，对角度相减即得到旋转角度</p>
<h5 id="缩放scale"><a href="#缩放scale" class="headerlink" title="缩放scale"></a>缩放scale</h5><p>计算AB线段长度和CD线段长度(勾股定理)，两条线段做比值就好</p>
<h5 id="平移ranslate"><a href="#平移ranslate" class="headerlink" title="平移ranslate"></a>平移ranslate</h5><p>平移的话我们只计算A点到C点的x坐标变化量</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h5 id="contains-compareDocumentPosition"><a href="#contains-compareDocumentPosition" class="headerlink" title="contains / compareDocumentPosition"></a>contains / compareDocumentPosition</h5><p>回想下两个手指同时触控的场景，有个问题不可避免，就是当两个手指作用在不同的DOM上面时该触发哪个节点的事件呢？</p>
<p>我们规定取两个手指节点公有的最近父节点作为触发的节点，那么如何取这个公用的最近父节点呢？没错，我们可以通过<code>contains()</code>和<code>compareDocumentPosition()</code>来获取</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">contains</span><span class="params">(ele1, ele2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ele1.contains ? ele1 != ele2 &amp;&amp; ele1.contains(ele2) : !!(ele1.compareDocumentPosition(ele2) &amp; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得共有最近的父节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCommonRootNode</span><span class="params">(ele1, ele2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (ele1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (contains(ele1, ele2) || ele1 === ele2) &#123;</span><br><span class="line">      <span class="keyword">return</span> ele1;</span><br><span class="line">    &#125;</span><br><span class="line">    ele1 = ele1.parentNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先是<code>DOMElement.contains(DOMNode)</code>，作用于IE浏览器，用来确认DOMNode是否包含在另一个DOMElement中，是则返回true，注意，当DOMNode和DOMElement一致时，也是返回true，虽然不太合理</p>
<p>其次是<code>NodeA.compareDocumentPosition(NodeB)</code>，IE8及IE8以下不支持，比较两个节点，并返回描述它们在文档中位置的整数，需要注意这个方法的返回值：<br><img src="/assets/blogImg/mobile-gesture-1.jpg" alt=""></p>
<p>如果满足P1在P2之前，而且P1包含P2，则返回结果就是4+16=20</p>
<h5 id="load-DOMContentLoaded"><a href="#load-DOMContentLoaded" class="headerlink" title="load / DOMContentLoaded"></a>load / DOMContentLoaded</h5><p><code>DOMContentLoaded</code>事件：当初始HTML文档被完全加载和解析完成之后便触发，无需等待样式表、图像和子框架完成加载，低版本IE不支持，可以用<code>onreadystatechange</code>事件（<code>判断if(document.readyState == &#39;complete&#39;)</code>）</p>
<p><code>load</code>事件：在页面完全加载后触发，各浏览器都支持</p>
<p><a href="http://www.cnblogs.com/caizhenbo/p/6679478.html" target="_blank" rel="noopener">具体可查看DOMContentLoaded与load的区别</a></p>
<h5 id="relatedTarget"><a href="#relatedTarget" class="headerlink" title="relatedTarget"></a>relatedTarget</h5><p><code>relatedTarget</code>是一个事件属性，返回与事件的目标节点相关的节点<br>  对于<code>mouseover</code>事件来说，该属性是鼠标指针移到目标节点上时所离开的那个节点<br>  对于<code>mouseout</code>事件来说，该属性是离开目标时，鼠标指针进入的节点<br>  对于其他类型的事件来说，这个属性没有用</p>
<h3 id="成熟的手势库"><a href="#成熟的手势库" class="headerlink" title="成熟的手势库"></a>成熟的手势库</h3><p><a href="http://hammerjs.github.io/" target="_blank" rel="noopener">hammer.js</a><br><a href="https://github.com/madrobby/zepto/blob/master/src/touch.js#files" target="_blank" rel="noopener">zepto的touch模块</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> mobile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义事件]]></title>
      <url>//huzezhen.cn/2017/04/02/custom-event/</url>
      <content type="html"><![CDATA[<p>了解下自定义事件，主要是JavaScript中的事件触发器</p>
<!-- ![](/assets/blogImg/custom-event.jpg) -->
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在之前一篇关于 <a href="/2017/03/25/mobile-events/">移动端触摸事件</a> 的文章中，我们用到自定义事件来模拟<code>click</code>事件并阻止300ms后的原生<code>click</code>事件来解决点透问题</p>
<p>现在就讲下这个自定义事件，尤其是事件触发器：<code>dispatchEvent(高级浏览器)</code>、<code>fireEvent(IE浏览器)</code></p>
<h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p>绑定一个自定义事件，还是使用大家比较熟悉的<code>addEventListener()</code>和<code>attachEvent()</code></p>
<p>既然提到了，就带大家回顾下这两个方法，可自行选择跳过</p>
<p>首先是<code>addEventListener()</code>方法，语法如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="keyword">event</span>, callback, useCapture)</span><br></pre></td></tr></table></figure></p>
<p>参数<code>event</code>：绑定的事件名称<br>参数<code>callback</code>：触发的回调函数，事件对象会作为第一个参数传入函数<br>参数<code>useCapture</code>：布尔值，表示指定事件是在捕获（true）或冒泡（false）阶段执行，默认值是false（<a href="http://blog.csdn.net/moguzhale/article/details/53503044" target="_blank" rel="noopener">事件冒泡和捕获的执行顺序</a>）</p>
<p>简单例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">dom.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'click success!'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是IE8及IE8以下不支持<code>addEventListener</code>这个方法，它们绑定事件使用的是<code>attachEvent()</code></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elemetn.attachEvent(<span class="keyword">event</span>, callback)</span><br></pre></td></tr></table></figure>
<p>参数<code>event</code>：绑定的事件名称，但是注意要加<code>on</code>，例如：<code>onclick</code><br>参数<code>callback</code>：触发的回调函数，事件对象会作为第一个参数传入函数</p>
<p>简单例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">dom.attachEvent(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'click success!'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="生成与触发"><a href="#生成与触发" class="headerlink" title="生成与触发"></a>生成与触发</h3><p>我们先看一个例子，这例子就是一个自定义事件的触发器：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fireEvent = <span class="function"><span class="keyword">function</span>(<span class="params">element,event</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.createEventObject) &#123;  </span><br><span class="line">    <span class="comment">// IE浏览器支持fireEvent方法  </span></span><br><span class="line">    <span class="keyword">var</span> evt = <span class="built_in">document</span>.createEventObject();  </span><br><span class="line">    <span class="keyword">return</span> element.fireEvent(<span class="string">'on'</span>+ event, evt)  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="comment">// 其他标准浏览器使用dispatchEvent方法  </span></span><br><span class="line">    <span class="keyword">var</span> evt = <span class="built_in">document</span>.createEvent(<span class="string">'HTMLEvents'</span>);   </span><br><span class="line">    evt.initEvent(event, <span class="literal">true</span>, <span class="literal">true</span>);  </span><br><span class="line">    <span class="keyword">return</span> !element.dispatchEvent(evt);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里注意两个方面，一个是<strong>event对象实例的创建</strong>，一个是<strong>事件的触发</strong></p>
<p>主要分为高级浏览器与IE浏览器两种情况：</p>
<p>在高级浏览器下：</p>
<ol>
<li>先调用<code>document</code>对象的<code>createEvent</code>方法得到一个event对象实例</li>
<li>再执行这个对象实例的<code>initEvent</code>方法初始化，这方法接收三个参数：事件类型，是否冒泡，是否阻止浏览器的默认行为</li>
<li>初始化之后可以给这个对象实例加属性并定义值，这些属性的值能在触发之后的回调函数的事件对象取到</li>
<li>调用该DOM元素的<code>dispatchEvent</code>方法，参数是上面生成的对象实例，这样就触发了</li>
</ol>
<p>在IE浏览器下：</p>
<ol>
<li>调用<code>doucment</code>对象的<code>createEventObject</code>方法得到一个event对象实例</li>
<li>可以这个对象实例加属性并定义值，这些属性的值能在触发之后的回调函数的事件对象取到</li>
<li>调用该DOM元素的<code>fireEvent</code>方法，第一个参数是事件类型(绑定时事件没有on开头的话，这里记得前缀加上on)，第二个参数是上面得到的event对象实例</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>document.creatEventObject()</code>是IE创建event对象实例的方法，和document.creatEvent( ‘HTMLEvents’ )在非IE主流浏览器下的作用相同</p>
<p><code>fireEvent</code>是IE下的事件触发器，与<code>dispatchEvent</code>在非IE主流浏览器下作用相同</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[探索移动端事件]]></title>
      <url>//huzezhen.cn/2017/03/25/mobile-events/</url>
      <content type="html"><![CDATA[<p>探索移动端的几个触摸事件</p>
<!-- ![](/assets/blogImg/mobile-events.jpg) -->
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要记录移动端几个touch类事件：<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>、<code>touchcancel</code></p>
<p>以及事件对象event的几个主要属性：<code>changedTouches</code>、<code>targetTouches</code>、<code>touches</code></p>
<p>记录的主要目的，首先是为了增加自己对移动端事件的了解，主要也是为了防止自己以后再做出将<code>touchmove</code>讲成<code>touchover</code>的蠢事，切记木有<code>touchover</code>这样的玩意！</p>
<h3 id="touch类事件"><a href="#touch类事件" class="headerlink" title="touch类事件"></a>touch类事件</h3><p><code>touchstart</code>：当手指触摸到屏幕时会触发<br><code>touchmove</code>：当手指在屏幕上移动时触发<br><code>touchend</code>：当手指离开屏幕时触发<br><code>touchcancel</code>：可由系统自行触发，比如手指触摸屏幕的时候，突然alert了一下，或者系统中其他打断了touch行为，则可以触发该事件</p>
<p>事件触发顺序：<strong>touchstart</strong> &gt; <strong>touchmove</strong> &gt; <strong>touchend</strong> &gt; <strong>click</strong></p>
<h3 id="事件对象的主要属性"><a href="#事件对象的主要属性" class="headerlink" title="事件对象的主要属性"></a>事件对象的主要属性</h3><p>这里重点了解下事件对象<code>TouchEvent</code>的三个重要属性：</p>
<p><code>changedTouches</code>：记录着触发该次事件的信息，一般length为1<br><code>targetTouches</code>：保存了当前所触碰屏幕的手指信息,记录的是当前DOM节点上全部的触摸对象的信息<br><code>touches</code>：保存了当前所有触碰屏幕的手指信息,记录的是屏幕上全部的触摸对象的信息</p>
<p>借助下面的场景帮忙理解：<br>有两个div，分别为A和B，B绑定了<code>touchstart</code>事件，然后依次执行以下操作：</p>
<ol>
<li>先放一根手指到B上面，触发<code>touchstart</code>事件，这时候三个属性都是一样的，包含这次触摸的Touch对象信息</li>
<li>在上步操作的前提下，再分别放一根手指到A和B上，又会触发B的<code>touchstart</code>事件，这时候<code>changedTouches</code>只会包含后来两次触摸的Touch对象信息，因为上步操作的手指不变，<code>targetTouches</code>记录的则是B上面两根手指触摸的Touch对象信息， <code>touches</code>则是屏幕上所有的触摸对象的信息，这里是指这三根手指触摸的Touch对象信息</li>
</ol>
<p>如果使用<code>jQuery</code>，需要这样取这三个原生的触摸对象：<code>e.originalEvent.changedTouches</code>、<code>e.originalEvent.targetTouches</code>、<code>e.originalEvent.touches</code></p>
<p>三个属性都是<code>TouchList</code>类型，每个属性都存储相关的<code>Touch</code>对象（一些触控位置、目标元素的信息）</p>
<h3 id="Touch对象的主要属性"><a href="#Touch对象的主要属性" class="headerlink" title="Touch对象的主要属性"></a>Touch对象的主要属性</h3><p>主要了解下<code>Touch</code>对象中有什么主要属性</p>
<p><code>clientX</code> / <code>clientY</code>：触摸点相对浏览器窗口的位置<br><code>pageX</code> / <code>pageY</code>：触摸点相对于页面的位置<br><code>screenX</code> / <code>screenY</code>：触摸点相对于屏幕的位置<br><code>identifier</code>：Touch对象的ID<br><code>target</code>：记录当前的DOM元素</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>第一个需要注意的地方，<code>TouchEvent</code>事件对象中的<code>touches</code>、<code>targetTouches</code>只存储接触屏幕的触点信息，所以在触发<code>touchend</code>事件时（即此刻手指已离开屏幕），这两个属性是空的，所以要获取触点最后离开的状态要使用<code>changedTouches</code></p>
<p>第二个需要注意的地方，<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>、<code>touchcancel</code>、<code>click</code>的事件对象的target属性永远是触控事件最先发生的那个元素，借助下面的场景帮忙理解：<br><img src="/assets/blogImg/mobile-events-1.jpg" alt=""><br>大的元素A，小的元素B，我们从元素A滑动到元素B上然后松开手指，这时候是触发A元素的<code>touchend</code>事件，因为它是最先发生的元素</p>
<p>那如果我们想正确触发元素B的<code>touchend</code>事件的话，可借助<code>document.elementFromPoint</code>得到顶层的元素再来触发</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.elementFromPoint(clientX, clientY)  <span class="comment">// 传入坐标值，可以得到包含该坐标点的最顶层的元素</span></span><br></pre></td></tr></table></figure>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>既然讲到了移动端的触摸事件，顺带提下它的<code>click</code>事件，大家都知道在移动端上<code>click</code>事件会有300ms的延迟，原因是因为在移动端浏览器上双击可以放大网页，浏览器为了区分是双击缩放还是点击事件，就设置了300ms的间隔时间，如果在300ms内有两次点击则认为是双击缩放</p>
<p>不过现在移动端网页基本会设置viewport来禁止用户缩放，但是部分低版本安卓、微信和QQ内置的webview还是会存在300ms延迟的问题<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">"viewport"</span> <span class="attribute">content</span>=<span class="string">"width=device-width,user-scalable=no,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>那怎么解决呢？有人就会想，用<code>touchstart</code>事件来替代<code>click</code>，这样会带来一些问题，首先例如长按也会被认为是一次点击，而且会带来另一个经典的问题：<strong>点透</strong></p>
<p>那什么是<strong>点透</strong>呢，看以下场景：<br>场景：元素上有个遮罩层，点击遮罩层时让遮罩层消失<br>问题：点击遮罩层，根据上文我们用<code>touchstart</code>事件来绑定遮罩层，点击之后遮罩层消失，但是遮罩层下的元素300ms后触发<code>click</code>事件<br>原因：<code>touchstart</code>事件发生后遮罩层消失后，浏览器会在300ms后找到当前最上层的元素触发<code>click</code>事件</p>
<p>为了解决这些问题，<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">fastclick.js</a>就出现了，大致原理：<br>在检测到<code>touchend</code>事件时通过<strong>DOM自定义事件</strong>立即模拟一个<code>click</code>事件，再把300ms后的原生<code>click</code>事件阻止掉</p>
<p>关于<strong>DOM自定义事件</strong>再开篇详解</p>
<blockquote>
<p><a href="/2017/04/02/custom-event/">已更新，点击查看</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> mobile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 模块规范]]></title>
      <url>//huzezhen.cn/2017/02/23/javascript-module-Specification/</url>
      <content type="html"><![CDATA[<p>关于JavaScript模块化编程规范一些总结</p>
<p>包括：CommonJS、AMD、CMD、UMD、ES6</p>
<!-- ![](/assets/blogImg/javascript-module-Specification.jpg) -->
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着web page进化到web application，浏览器端需要处理的逻辑越来越复杂，需要展现的样式和动画等效果越来越多，对工程的要求也越来越高，模块化的需求也应运而生</p>
<p>使用模块化有以下好处：</p>
<ul>
<li>组件的复用，降低开发成本和维护成本</li>
<li>组件单独开发，方便分工合作</li>
<li>模块化遵循标准，方便自动化依赖管理，代码优化，部署</li>
</ul>
<p>而模块与模块之间要相互依赖是需要编写代码时遵循一定的模块规范，现存有以下几种规范</p>
<h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>偏向于服务器端的规范，例如<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>就是遵循这个规范</p>
<p>加载模块采取的<strong>同步方式</strong>（区别于AMD与CMD），是因为服务端模块放在本地硬盘上，加载很快</p>
<p>CommonJS的一个模块就是一个脚本文件，每个模块都是单独的作用域，即在一个文件定义的变量都是私有的，其他文件不可见</p>
<p>使用require方法来加载模块，第一次加载该脚本时就会执行整个脚本，然后在内存中生成一个对象，然后下次再调用require方法时，不会再执行该模块，而是从缓存中取值</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  id: '<span class="string">...</span>',	<span class="string">//</span> 模块名字</span><br><span class="line">  exports: &#123; <span class="string">...</span> &#125;,	<span class="string">//</span> exports对象，模块导出的接口，别人从这里取值</span><br><span class="line">  loaded: <span class="literal">true</span>,	<span class="string">//</span> 表示模块是否加载完成</span><br><span class="line">  <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单的例子：</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">exports</span>.add = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  return a + b;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// other.js</span></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">math</span> = <span class="title">require</span><span class="params">(<span class="string">'math'</span>)</span>;</span></span><br><span class="line">math.add(<span class="number">1</span>, <span class="number">2</span>);	<span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>因为CommonJS规范采取的是同步的方式来加载模块，所以在浏览器端不适合（浏览器端从服务器端加载模块容易受带宽等影响），所以在浏览器端出现了一个<strong>AMD</strong>规范</p>
<h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p>AMD(Asynchronous Module Definition)，即异步模块定义，采用异步方式加载模块，典型代表：<a href="http://requirejs.org/" target="_blank" rel="noopener">RequireJS</a></p>
<p>AMD也采用require方法加载模块，与CommonJS不同的是，它需要两个参数</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>([<span class="class"><span class="keyword">module</span>], <span class="title">callback</span>);</span></span><br></pre></td></tr></table></figure>
<p>第一个参数<strong>[module]</strong>指想要加载的模块，是一个数组，即可以加载多个模块<br>第二个参数为加载模块完成后立即执行的回调函数，该回调函数的参数与前面的模块数组一一对应</p>
<p>简单的例子：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="built_in">math</span>], <span class="function"><span class="keyword">function</span><span class="params">(math)</span></span> &#123;</span><br><span class="line">  <span class="built_in">math</span>.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个模块的编写，都要遵循AMD模块规范，即每个模块都要用define()函数来定义，具体如下</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span>(<span class="section">id</span>?, dependencies?, factory);</span><br></pre></td></tr></table></figure>
<p>第一个参数id，可选，表示模块的名字，不填则默认该脚本的名字<br>第二个参数dependencies，可选，表示依赖的模块，不填则默认[‘require’, ‘exports’, ‘module’]，具体依第三个参数（工厂方法的参数来定）<br>第三个参数是模块的工厂函数，模块初始化要执行的函数或对象，如果为函数，它应该只被执行一次，如果是对象，此对象应该为模块的输出值</p>
<p>简单的例子：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js，不依赖其他模块，返回一个对象</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span><span class="params">(x, y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">	add: add</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 调用<span class="built_in">math</span>.js模块</span><br><span class="line"><span class="built_in">require</span>([<span class="built_in">math</span>], <span class="function"><span class="keyword">function</span><span class="params">(math)</span></span> &#123;</span><br><span class="line">  <span class="built_in">math</span>.add(<span class="number">1</span>, <span class="number">2</span>);	//<span class="number">3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>可见，AMD模块规范是在一开始require的时候就加载了所有所需的模块，属于<strong>依赖前置</strong>，这就区别于接下来要说的CMD模块规范，CMD规范是<strong>依赖就近</strong></p>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>CMD规范是SeaJS在推广过程中对模块定义的规范化产出的，它推崇<strong>依赖就近，延迟执行</strong></p>
<p>简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">requie, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 依赖可以就近书写</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">  a.test();</span><br><span class="line">  <span class="comment">// 软依赖，所谓软依赖就是满足一定条件才加载某模块</span></span><br><span class="line">  <span class="keyword">if</span> (status) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line">    b.test();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>跟AMD最大的区别就是：<strong>AMD是依赖前置，CMD是依赖就近</strong></p>
<p>跟AMD的相同点：都是用<strong>difine</strong>和<strong>require</strong>，<strong>都会预加载依赖的js文件</strong>（但是调用和声明依赖的地方不同）</p>
<p>需要注意的是：</p>
<ol>
<li>AMD也可以像CMD一样在代码中使用require来加载模块，但是这样的话这个模块就不会预先加载，而是在用到的时候同步加载（所以也不推荐这样写）</li>
<li>CMD的define也可以带三个参数，但是带id和dependencies参数的define用法不属于CMD规范，而属于<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">Modules/Transport规范</a></li>
</ol>
<h3 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h3><p>通用模块规范，例如：你写了个小工具，希望他支持AMD又支持CommonJS，就可以使用UMD</p>
<p>人们希望一种规范来支持AMD和CommonJS规范，UMD应运而生，同时支持AMD和CommonJS规范，也支持古老的全局模块规范</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">// AMD</span></span><br><span class="line">    define([<span class="string">'jquery'</span>, <span class="string">'underscore'</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// Node, CommonJS-like</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>), <span class="built_in">require</span>(<span class="string">'underscore'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Browser globals (root is window)</span></span><br><span class="line">    root.returnExports = factory(root.jQuery, root._);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$, _</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">//私有方法，因为下面没有在return中暴露</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">//在return中暴露的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">//在return中暴露的方法</span></span><br><span class="line">  <span class="comment">//暴露多个方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    b: b,</span><br><span class="line">    c: c</span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>UMD规范就像是一个语法糖，应用UMD规范的JS就是一个IIFE（立即执行函数），参数一是执行的环境，参数二是模块的定义体</p>
<p>从代码也可以看出，优先判断是否支持AMD，再判断CommonJS，两者都不支持则认为是浏览器环境（window）</p>
<h3 id="ES6的模块化"><a href="#ES6的模块化" class="headerlink" title="ES6的模块化"></a>ES6的模块化</h3><p>ES6发布的module并没有直接采用CommonJS，甚至连require都没有采用</p>
<p>它采用import、export实现模块的输入输出，import来导入其他模块提供的功能，export来规定模块的对外接口</p>
<p>有关<strong>export</strong>(导出)的几个简单例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 导出变量 - a.js</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;a, b&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 导出函数</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;foo, bar <span class="keyword">as</span> bar2&#125;	<span class="comment">// as是来给导出的变量名重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 导出类</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123;&#125;		<span class="comment">// 关于export default，下面会讲到</span></span><br></pre></td></tr></table></figure>
<p>有关<strong>import</strong>(导入)的几个简单例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 导入变量a和b</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;a, b&#125; <span class="keyword">from</span> <span class="string">'a'</span>	<span class="comment">// 上面export例子中的a.js，后缀可省略</span></span><br><span class="line"><span class="built_in">console</span>.log(a + b);	<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 导入变量a和b，并将a重命名为c</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123;a <span class="keyword">as</span> c, b&#125; <span class="keyword">from</span> <span class="string">'a'</span>	<span class="comment">// 利用as来重命名，在import一样有效</span></span><br></pre></td></tr></table></figure>
<p>利用<strong> * </strong>关键字来整体加载</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;a, b&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">num</span> from <span class="string">'b'</span>	<span class="comment">// 使用*号来导入整体，并用as来重命名</span></span><br><span class="line">console.log(<span class="built_in">num</span>.a);</span><br><span class="line">console.log(<span class="built_in">num</span>.b);</span><br></pre></td></tr></table></figure>
<p>关于<strong>export default</strong></p>
<p>本质上，export default输出的是一个叫做default的变量或方法，输入这个default变量时不需要花括号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出函数 - c.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效于：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123;a <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入时可以这样</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'c'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效于，或者说就是下面这种写法的简写，是同一个意思</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> a&#125; <span class="keyword">from</span> <span class="string">'c'</span>;</span><br></pre></td></tr></table></figure>
<p>所以，当我们看到import哪个变量时没有花括号（没有*号），我们应该在脑海里能还原它带花括号时应该是怎么样的</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable">$,</span>&#123;each,map&#125; from <span class="string">'jquery'</span>;	<span class="regexp">//</span> 这里的<span class="variable">$，</span>其实就是&#123;default as <span class="variable">$&#125;</span>的简写</span><br></pre></td></tr></table></figure>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><a href="http://blog.csdn.net/pwiling/article/details/51958693" target="_blank" rel="noopener">关于node.js的module.exports和exports</a><br><a href="http://imweb.io/topic/582293894067ce9726778be9?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">Node中没搞明白require和import，你会被坑的很惨</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Javascript的严格模式]]></title>
      <url>//huzezhen.cn/2017/01/23/strict-mode/</url>
      <content type="html"><![CDATA[<p>ECMAScript 5新增了一种新的运行模式：<strong>严格模式</strong></p>
<!-- ![](/assets/blogImg/strict-mode.jpg) -->
<a id="more"></a>
<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>本文主要为了解决三个问题：为什么要用严格模式、如何进入严格模式、严格模式有哪些规则？</p>
<h3 id="2-使用严格模式有什么作用"><a href="#2-使用严格模式有什么作用" class="headerlink" title="2. 使用严格模式有什么作用"></a>2. 使用严格模式有什么作用</h3><p>消除JavaScript语法的一些不合理、不严谨的地方，减少怪异行为（当确定的问题发生时抛出相应错误）<br>消除代码运行中的一些不安全的地方，确保代码运行的安全<br>提高编译器效率，增加运行速度</p>
<h3 id="3-如何进入严格模式"><a href="#3-如何进入严格模式" class="headerlink" title="3. 如何进入严格模式"></a>3. 如何进入严格模式</h3><p>首先，进入的严格模式的标志是：<code>&#39;use strict&#39;;</code></p>
<h5 id="3-1-针对整个脚本"><a href="#3-1-针对整个脚本" class="headerlink" title="3.1 针对整个脚本"></a>3.1 针对整个脚本</h5><p>在顶部写上: <code>&#39;use strict&#39;;</code>，这段脚本就在严格模式中执行</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="meta">'use strict'</span>;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 这样就进入严格模式 </span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'严格模式'</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 这样是正常模式</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'正常模式'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="3-2-针对单个函数"><a href="#3-2-针对单个函数" class="headerlink" title="3.2 针对单个函数"></a>3.2 针对单个函数</h5><p>在函数体内第一行写上：<code>&#39;use strict&#39;;</code>，这个函数就启用严格模式执行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'严格模式'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'正常模式'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-3-其他注意点"><a href="#3-3-其他注意点" class="headerlink" title="3.3 其他注意点"></a>3.3 其他注意点</h5><p>支持严格模式的浏览器有：IE10+、Firefox4+、safari12+、opera12+、chrome<br>不支持严格模式的浏览器会将<code>&#39;use strict&#39;;</code>当作普通字符串语句执行</p>
<h3 id="4-严格模式的规则"><a href="#4-严格模式的规则" class="headerlink" title="4. 严格模式的规则"></a>4. 严格模式的规则</h3><h5 id="4-1-变量方面的规则"><a href="#4-1-变量方面的规则" class="headerlink" title="4.1 变量方面的规则"></a>4.1 变量方面的规则</h5><ul>
<li><p>全局变量需显式声明，不能意外创建</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line">a = <span class="number">1</span>;	<span class="comment">// 报错，在正常模式下会当成全局变量</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>不能对变量调用delete操作符<br>根本原因是<code>var</code>、<code>let</code>、<code>const</code>声明的变量默认是不可配置的，即<code>configurable</code>的值是<code>false</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> a;	<span class="comment">// 报错，在正常模式下会返回false而不会报错，也是不会删除成功</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>严格模式下新增一些保留字不可作为变量名<br>保留字：<code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, <code>yield</code></p>
</li>
</ul>
<h5 id="4-2-对象方面的规则"><a href="#4-2-对象方面的规则" class="headerlink" title="4.2 对象方面的规则"></a>4.2 对象方面的规则</h5><ul>
<li>不能对只读属性赋值</li>
</ul>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">  <span class="built_in">name</span>: <span class="string">'lily'</span></span><br><span class="line">&#125;</span><br><span class="line">Object.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">  writable: <span class="literal">false</span> <span class="comment">// 设置为只读属性</span></span><br><span class="line">&#125;)</span><br><span class="line">person.<span class="built_in">name</span> = <span class="string">'lucy'</span>;	<span class="comment">// 会报错，正常模式下不会报错，但也赋值不成功</span></span><br><span class="line">console.<span class="built_in">log</span>(person.<span class="built_in">name</span>);	<span class="comment">// 正常模式下输出'lily'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不能对不可配置的属性进行delete操作</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> store = &#123;</span><br><span class="line">  book: <span class="string">'哈利波特'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(store, <span class="string">'book'</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">false</span>	<span class="comment">// 设置为不可配置属性</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">delete</span> store.book; <span class="comment">// 会报错，正常模式不会报错，但也删除不了</span></span><br><span class="line"><span class="built_in">console</span>.log(store.book); <span class="comment">// 正常模式会输出'哈利波特'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不能对一个使用getter方法读取的属性进行赋值</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="function"><span class="keyword">get</span> <span class="title">p</span>(<span class="params"></span>)</span> &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125; <span class="comment">// getter方法</span></span><br><span class="line"> &#125;</span><br><span class="line"> obj.p = <span class="number">2</span>; <span class="comment">// 报错，正常模式不会报错，但也赋值不了</span></span><br><span class="line"> console.log(obj.p); <span class="comment">// 正常模式会输出2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不能对禁止扩展的对象添加新属性<br>使用<code>Object.preventExtensions(obj)</code>方法来让<code>obj</code>无法拓展</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj); <span class="comment">// 这样obj就无法拓展</span></span><br><span class="line">obj.a = <span class="number">1</span>; <span class="comment">// 报错，正常模式则不会报错，但是也拓展属性不成功，obj仍是空对象</span></span><br></pre></td></tr></table></figure>
<h5 id="4-3-函数方面的规则"><a href="#4-3-函数方面的规则" class="headerlink" title="4.3 函数方面的规则"></a>4.3 函数方面的规则</h5><ul>
<li>函数如果有多个参数，参数名不能重名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num, num</span>)</span>&#123; <span class="comment">// 会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 正常模式会输出2</span></span><br><span class="line"> &#125;</span><br><span class="line"> test(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>修改形参不会反映到arguments中，即arguments不追踪参数的变化</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  value = <span class="string">'形参的数据被修改'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// arguments的值不会因为形参被修改而修改，所以arguments[0]还是'形参'，正常模式下会输出'形参的数据被修改'</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);	<span class="comment">// '形参的数据被修改'</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">'形参'</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>不允许使用arguments.callee和函数的caller<br>函数的caller：在一个函数调用另一个函数时，被调用函数会自动生成一个caller属性，指向调用它的函数对象<br>arguments.callee：当函数被调用时，它的arguments.callee对象就会指向自身，也就是一个对自己的引用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> caller = testCaller.caller; <span class="comment">// 会报错</span></span><br><span class="line">  <span class="keyword">var</span> callee = <span class="built_in">arguments</span>.callee; <span class="comment">// 会报错</span></span><br><span class="line">  alert(caller); <span class="comment">// 正常模式会弹出 function aCaller() &#123; fn(); &#125;</span></span><br><span class="line">  alert(callee); <span class="comment">// 正常模式会弹出自身函数的实现代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aCaller</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    fn();  </span><br><span class="line">&#125;  </span><br><span class="line">aCaller()</span><br></pre></td></tr></table></figure>
<h5 id="4-4-其他规则"><a href="#4-4-其他规则" class="headerlink" title="4.4 其他规则"></a>4.4 其他规则</h5><ul>
<li>创设eval作用域</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'var x = 3;x'</span>)); <span class="comment">// 3，因为在严格模式下，eval语句本身就是一个作用域</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 2，正常模式会输出3，因为值经过eval语句的执行已经被改变为3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>禁止this关键字指向全局对象</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function other() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value); <span class="regexp">//</span> 报错，<span class="keyword">this</span>不会指向全局对象，报错：Cannot read property <span class="string">'value'</span> <span class="keyword">of</span> <span class="literal">undefined</span></span><br><span class="line">&#125; </span><br><span class="line">other();</span><br></pre></td></tr></table></figure>
<ul>
<li>不允许使用八进制字面量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> other = <span class="number">010</span>; <span class="comment">// 报错：Octal literals are not allowed in strict mode</span></span><br><span class="line"><span class="built_in">console</span>.log(other); <span class="comment">// 正常模式下会输出8</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不允许使用with语句</li>
<li>不允许使用eval和arguments作为标识符，不能对他们进行赋值</li>
</ul>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5新特性与技巧]]></title>
      <url>//huzezhen.cn/2016/10/10/html5-new-feature/</url>
      <content type="html"><![CDATA[<p>记录HTML5的一些新的特性与技巧</p>
<!-- ![](/assets/blogImg/html5-new-feature.jpg) -->
<a id="more"></a>
<h3 id="新的文档类型声明"><a href="#新的文档类型声明" class="headerlink" title="新的文档类型声明"></a>新的文档类型声明</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>HTML5使用UTF-8编码</p>
<h3 id="去除link和script标签里的type属性"><a href="#去除link和script标签里的type属性" class="headerlink" title="去除link和script标签里的type属性"></a>去除link和script标签里的type属性</h3><p>script和link里不需要写<code>type</code></p>
<h3 id="figure和figcaption标签的组合"><a href="#figure和figcaption标签的组合" class="headerlink" title="figure和figcaption标签的组合"></a>figure和figcaption标签的组合</h3><p>语义化地将图片与注释联系起来</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xxx.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一幅图片的描述<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="语义化了header和footer标签"><a href="#语义化了header和footer标签" class="headerlink" title="语义化了header和footer标签"></a>语义化了header和footer标签</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">header</span>&gt;</span><br><span class="line"><span class="params">...</span></span><br><span class="line">&lt;/<span class="keyword">header</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="新的small标签"><a href="#新的small标签" class="headerlink" title="新的small标签"></a>新的small标签</h3><p>HTML5里<code>small</code>标签将旁注呈现为小型文本，负责声明、注意事项、法律限制或版本声明的特征通常都是小型文本。<br>在HTML4或XHTML里已经定义过<code>small</code>，不过对它的使用却没有一个完整的说明。在HTML里，它主要用于网页下方的版本声明，邮箱等小型文本。</p>
<h3 id="hgroup标签-HTML5-1中已废除"><a href="#hgroup标签-HTML5-1中已废除" class="headerlink" title="hgroup标签(HTML5.1中已废除)"></a>hgroup标签(<mark>HTML5.1中已废除</mark>)</h3><p>主要表明标题的集合，用处不大，如果想表明主标题与副标题，可如下：</p>
<p>使用标点符号</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端博文:HTML5新特性与技巧<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用span标签</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端博文</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>HTML5新特性与技巧<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用header标签</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端博文<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML5新特性与技巧<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="mark标签"><a href="#mark标签" class="headerlink" title="mark标签"></a>mark标签</h3><p>标签内的字符会高亮显示</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>文字高亮<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="contenteditable属性"><a href="#contenteditable属性" class="headerlink" title="contenteditable属性"></a>contenteditable属性</h3><p>让一个div元素变得可编辑，可在div中加上<code>contenteditable</code>属性，如：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> contenteditable=<span class="string">"true"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<p>但是需要注意，这样的话富文本也可以输入进去，如果想限制只能输入纯文本的话，可以这样：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> contenteditable=<span class="string">"plaintext-only"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="placeholder属性"><a href="#placeholder属性" class="headerlink" title="placeholder属性"></a>placeholder属性</h3><p>这个属性是占位符的意思，不用像以前用JS来实现占位符，可直接使用该属性（支持HTML5的浏览器）<br>placeholder属性适用于以下的<code>input</code>类型：text，search，url，telephone，email以及password</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> placeholder=<span class="string">"请输入数字"</span> &gt;</span><br></pre></td></tr></table></figure>
<p>但是不支持HTML5的浏览器还是得用JS的方法去实现占位符，因此大多数网站都是用<code>label</code>标签来假装占位符，通过隐藏和显示来实现效果以便兼容大部分浏览器</p>
<h3 id="required属性"><a href="#required属性" class="headerlink" title="required属性"></a>required属性</h3><p>指明某一输入是否必需，有两种声明方式：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"text"</span> <span class="attribute">name</span>=<span class="string">"input1"</span> required&gt;</span><br><span class="line">或</span><br><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"text"</span> <span class="attribute">name</span>=<span class="string">"input2"</span> <span class="attribute">required</span>=<span class="string">"required"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>主要在表单中用，声明了required的元素为空，提交时输入框会高亮提示</p>
<h3 id="autofocus属性"><a href="#autofocus属性" class="headerlink" title="autofocus属性"></a>autofocus属性</h3><p>让元素（按钮、文本框等）自动获得焦点，而不用通过JS，如：</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> autofocus&gt;</span><br><span class="line">或</span><br><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> autofocus=<span class="string">"autofocus"</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="pattern属性"><a href="#pattern属性" class="headerlink" title="pattern属性"></a>pattern属性</h3><p>可在标签中通过这个属性来插入正则表达式，如：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"text"</span> <span class="attribute">pattern</span>=<span class="string">"[A-Za-z]&#123;4,10&#125;"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>如果浏览器支持pattern属性，表单提交时会验证，不通过文本框会高亮提示</p>
<h3 id="data属性"><a href="#data属性" class="headerlink" title="data属性"></a>data属性</h3><p>自定义属性，以<code>data</code>前缀定义我们的自定义属性<code>data-*</code></p>
<p>HTML代码</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"myDiv"</span> data-custom-val=<span class="string">"my value"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<p>获取属性值的方法</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">divEl </span>= document.getElementById(<span class="string">"myDiv"</span>)<span class="comment">;</span></span><br><span class="line">alert(<span class="keyword">divEl.dateset.customVal); </span><span class="comment">/* 通过dateset对象读取，注意需要使用驼峰写法 */</span></span><br><span class="line">alert(<span class="keyword">divEl.getAttribute("data-custom-val")); </span><span class="comment">/* 通过getAttribute方法读取 */</span></span><br><span class="line">alert($(<span class="string">"#myDiv"</span>)<span class="meta">.data</span>(<span class="string">"customVal"</span>))<span class="comment">; /*通过jQuery的data方法读取，同样需要注意驼峰写法*/</span></span><br></pre></td></tr></table></figure>
<p>设置属性值的方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divEl = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">divEl.dataset.customVal = <span class="string">"the new value"</span>; <span class="comment">/* 通过dateset对象设置，驼峰写法 */</span></span><br><span class="line">divEl.setAttribute(<span class="string">"data-custom-val"</span>,<span class="string">"the new value"</span>); <span class="comment">/* 通过setAttribute方法设置 */</span></span><br><span class="line">$(<span class="string">"#myDiv"</span>).data(<span class="string">"customVal"</span>,<span class="string">"the new value"</span>); <span class="comment">/* jQuery的data方法 */</span></span><br></pre></td></tr></table></figure>
<p>CSS中也可以这样使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">content</span><span class="selector-pseudo">:attr(data-custom-val)</span>;    <span class="comment">/*注意这里*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="input文本框中type为email"><a href="#input文本框中type为email" class="headerlink" title="input文本框中type为email"></a>input文本框中type为email</h3><p>表单中的input设置type为email后，提交表单会判断是否邮件格式，不是则文本框高亮提示</p>
<h3 id="input文本框的type为range"><a href="#input文本框的type为range" class="headerlink" title="input文本框的type为range"></a>input文本框的type为range</h3><p>创建滑块，如：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"range"</span> <span class="attribute">min</span>=<span class="string">"0"</span> <span class="attribute">max</span>=<span class="string">"10"</span> <span class="attribute">step</span>=<span class="string">"1"</span> <span class="attribute">value</span>=<span class="string">""</span>&gt;</span><br></pre></td></tr></table></figure>
<p>可以使用css中的:before和:after来显示min和max的值，如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="range"]</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="built_in">attr</span>(min);</span><br><span class="line">  <span class="attribute">padding-right</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="range"]</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="built_in">attr</span>(max);</span><br><span class="line">  <span class="attribute">padding-left</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="两种本地存储方案：localStorage和sessionStorage"><a href="#两种本地存储方案：localStorage和sessionStorage" class="headerlink" title="两种本地存储方案：localStorage和sessionStorage"></a>两种本地存储方案：localStorage和sessionStorage</h3><p>localStorage： 持久化的本地存储，除非自己清除，否则不会过期<br>sessionStorage: 会话级别的存储，同一个会话中的页面才能访问，且会话结束后数据也会销毁</p>
<p>后续准备写一篇文章详细探讨两者以及与cookies的区别对比</p>
<h3 id="HTML5表单特性"><a href="#HTML5表单特性" class="headerlink" title="HTML5表单特性"></a>HTML5表单特性</h3><p>新增了一些新的表单元素</p>
<p><code>datalist</code>、<code>datetime</code>、<code>output</code>、<code>keygen</code>、<code>date</code>、<code>month</code>、<code>week</code>、<code>time</code>、<code>color</code>、<code>number</code>、<code>range</code>、<code>email</code>、<code>url</code></p>
<h3 id="音视频标签"><a href="#音视频标签" class="headerlink" title="音视频标签"></a>音视频标签</h3><p>HTML5支持mp3、wav、ogg格式的音频，使用<code>audio</code>标签</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"file.ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"file.mp3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"file.mp3"</span>&gt;</span>Download<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>HTML5支持mp4、webm、ogg格式的视频，使用<code>video</code>标签</p>
<p>注意：不设置type类型是可以的，但是设置了的话浏览器就不用自己去寻找类型</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">preload</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"file.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg; codecs='vorbis,theora'"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"file.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4; codecs='avc1.42E01E, mp4a.40.2'"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> Your browser is old. <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"file.mp4"</span>&gt;</span> Download this video.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>preload</code>属性决定是否在浏览器加载页面时预先加载视频资源<br><code>controls</code>属性决定是否视频上显示进度条（不同浏览器样式是不一样的）</p>
<h3 id="检测属性支持"><a href="#检测属性支持" class="headerlink" title="检测属性支持"></a>检测属性支持</h3><p>例如检测浏览器是否支持pattern属性，可以这样：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"pattern"</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">"input"</span>)); <span class="comment">/* boolean */</span></span><br></pre></td></tr></table></figure>
<h3 id="标签的闭合与属性的引号"><a href="#标签的闭合与属性的引号" class="headerlink" title="标签的闭合与属性的引号"></a>标签的闭合与属性的引号</h3><p>HTML5不是XHTML，没有要求一定要引号和闭合元素，例如：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p <span class="attribute">class</span>=myClass <span class="attribute">id</span>=myId&gt;这是一个没有闭合的p元素</span><br></pre></td></tr></table></figure>
<p>不过为了可读性还是建议加上闭合</p>
<h3 id="哪些不是HTML5，HTML5废弃哪些HTML4标签"><a href="#哪些不是HTML5，HTML5废弃哪些HTML4标签" class="headerlink" title="哪些不是HTML5，HTML5废弃哪些HTML4标签"></a>哪些不是HTML5，HTML5废弃哪些HTML4标签</h3><p>不是HTML5：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SVG</span><br><span class="line">CSS3</span><br><span class="line">Geolocation</span><br><span class="line">Client Stroage</span><br><span class="line">Web Sockets</span><br></pre></td></tr></table></figure>
<p>HTML5废弃的HTML4标签</p>
<p><code>frame</code>、<code>frameset</code>、<code>noframe</code>、<code>applet</code>、<code>big</code>、<code>center</code>、<code>basefont</code></p>
<h3 id="output标签"><a href="#output标签" class="headerlink" title="output标签"></a>output标签</h3><p>定义不同类型的输出，显示计算的结果</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form oninput=<span class="string">"x.value=parseInt(a.value)+parseInt(b.value)"</span>&gt;<span class="number">0</span></span><br><span class="line">   &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"range"</span> id=<span class="string">"a"</span> value=<span class="string">"50"</span>&gt;<span class="number">100</span></span><br><span class="line">   +&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"number"</span> id=<span class="string">"b"</span> value=<span class="string">"50"</span>&gt;</span><br><span class="line">   =&lt;<span class="built_in">output</span> name=<span class="string">"x"</span> <span class="keyword">for</span>=<span class="string">"a b"</span>&gt;&lt;/<span class="built_in">output</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>显示如下：<br><img src="http://oerbra2zb.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161011145123.jpg" alt="结果"></p>
]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 新特性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端上阻止页面滚动与恢复页面滚动]]></title>
      <url>//huzezhen.cn/2016/10/09/stop-scroll-and-recover/</url>
      <content type="html"><![CDATA[<p>移动端开发时，如何在遮罩层出现的同时让背景失去上下滚动的能力？</p>
<!-- ![](/assets/blogImg/stop-scroll-and-recover.jpg) -->
<a id="more"></a>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>在一个HTML5页面上，弹出框弹出之后，显示遮罩层，背景其他按钮确实不能点，但在手机上测试，背景可以上下滑动</p>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>在弹出框出现时阻止页面滚动并在弹出框消失后恢复滚动</p>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>上锁：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"body"</span>).css(<span class="string">"position"</span>,<span class="string">"fixed"</span>); <span class="regexp">//</span>这样的话，背景就固定了，但是页面会滚动到顶部</span><br></pre></td></tr></table></figure></p>
<p>解锁：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"body"</span>).css(<span class="string">"position"</span>,<span class="string">"relative"</span>); <span class="regexp">//</span>这样就恢复滚动</span><br></pre></td></tr></table></figure></p>
<h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>上锁：思路就是阻止<code>touchmove</code>事件的默认行为，在弹出框的时候阻止body的<code>touchmove</code>事件的默认行为<br>解锁：在弹出框消失的时候恢复这个默认行为<br>具体方案如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bodyScroll</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">	e.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原生写法，注意IE8以及IE8以下使用<code>attachEvent()</code>和<code>detachEvent()</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"touchmove"</span>,bodyScroll,<span class="keyword">false</span>);  <span class="comment">/*上锁*/</span></span><br><span class="line">docume.removeEventListener(<span class="string">"touchmove"</span>,bodyScroll,<span class="keyword">false</span>); <span class="comment">/*解锁*/</span></span><br></pre></td></tr></table></figure></p>
<p>jQuery写法<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"body"</span>).on(<span class="string">"touchmove"</span>,<span class="keyword">bodyScroll); </span> <span class="comment">/*上锁*/</span></span><br><span class="line">$(<span class="string">"body"</span>).off(<span class="string">"touchmove"</span>,<span class="keyword">bodyScroll); </span><span class="comment">/*解锁*/</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> wap </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
